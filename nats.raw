;; addition operator for Nat's

(claim base-+
 (-> Nat Nat))
(define base-+
 (lambda (m) m))

(claim step-+
 (-> Nat Nat))
(define step-+
 (lambda (x)
  (add1 x)))

;; When I try to do this, I get
;; add1: expected valid Pie name
;;
;; (define step-+
;;  add1)

(claim +
 (-> Nat Nat Nat))
(define +
 (lambda (n m)
  (iter-Nat n
   (base-+ m)
   step-+)))

;; multiplication operator for Nat's

(claim base-*
 (-> Nat Nat))
(define base-*
 (lambda (m) 0))

(claim step-*
 (-> Nat
   (-> Nat Nat)))
(define step-*
 (lambda (m)
  (lambda (y)
   (+ m y))))

(claim *
 (-> Nat Nat Nat))
(define *
 (lambda (n m)
  (iter-Nat n
   (base-* m)
   (step-* m))))


;;
;; c + (a*c) == (1+a) * c (are they the same?)
;;
(claim test-*
  (Pi ([a Nat] [c Nat])
    (= Nat (+ c (* a c)) (* (+ 1 a) c))))
(define test-*
  (lambda (a c)
    (same (+ c (* a c)))))

;; (claim step-*
;;   (Pi ([n Nat])
;;     (-> (-> Nat Nat)
;;         (-> Nat Nat))))

;; (define step-*
;;   (lambda (n)
;;     (lambda (prev)
;;       (lambda (m) (+ m (prev m))))))

;; (claim *
;;   (-> Nat
;;     (-> Nat Nat)))
;; (define *
;;   (lambda (n)
;;     (ind-Nat n
;;       (lambda (n) (-> Nat Nat)) ;; the motive
;;       (lambda (_) 0)            ;; the base
;;       step-*)))       ;; the step

;; (+ 8 9) ;; 17
;; (* 31 11) ;; 341
;; (+ (* 10 (* 10 10)) (* 9 (* 9 9))) ;; 1729

(claim mot-range
  (-> Nat U))
(define mot-range
  (lambda (n)
    (Vec Nat n)))

(claim base-range
  (mot-range zero))
(define base-range
  (the (Vec Nat zero) vecnil))

(claim step-range
  (Pi ([n Nat])
    (-> (mot-range n)             ;; (Vec Nat       n )
        (mot-range (add1 n)))))   ;; (Vec Nat (add1 n))
(define step-range
  (lambda (n)
    (lambda (casen)
      (vec:: (add1 n) casen))))

(claim range
  (Pi ([n Nat])
    (Vec Nat n)))
(define range
  (lambda (n)
    (ind-Nat n
      mot-range
      base-range
      step-range)))

